#! /usr/bin/env bash

# ---------------------------------------------------------------------------- #
#                               debrand-download                               #
# ---------------------------------------------------------------------------- #
# Remove tags and sanitize the filenames of release group downloads.           #
#                                                                              #
# Branding and information tags are stripped, and an attempt is made to        #
# standardize the format of the season and episode identifier (ie: `S01E08`).  #
#                                                                              #
# eg:                                                                          #
#   The Last Man on Earth 720p [2HD] [AFG].mkv -> The Last Man on Earth.mkv    #
#   Beverly Hillbillies s1e4 [LOL] (AC3).mp4 -> Beverly Hillbillies S01E04.mp4 #
#                                                                              #
# By: Kevin MacMartin                                                          #
# Contact: prurigro at gmail dot com                                           #
#                                                                              #
# Distributed under the GPLv3                                                  #
# Copies can be obtained from gnu.org @ http://www.gnu.org/copyleft/gpl.html   #
# ---------------------------------------------------------------------------- #

#THE NAMES OF VARIOUS RELEASE GROUPS (CASE SENSITIVE)
SCENE=('2HD' '2hd' 'ACAB' 'AFG' 'ANON' 'ASAP' 'asap' 'BAJSKORV' 'BATV' 'BiA' 'BRiTiSH' 'BTN' 'c4tv' 'CaRaT' 'CLOWNSEC' 'COMPULSiON' 'DIMENSION' 'ETRG' 'EVOLVE' 'EXCELLENCE' 'Fastbet99' 'FEVER' 'FoV' 'FQM' 'fqm' 'FXG' 'greenbud1969' 'GREY SHADOW' 'HerMes' 'IMMERSE' 'Judas' 'juggs' 'JYK' 'KILLERS' 'killers' 'LOL' 'lol' 'Max' 'MiNT' 'NoTV' 'ORENJI' 'Orenji' 'P0W4' 'PDTV' 'pdtv' 'PhreakyFlix' 'PublicHD' 'QCF' 'rarbg' 'ReEnc' 'REMARKABLE' 'RiVER' 'RM' 'SaMettv' 'SFD' 'TiTAN' 'TLA' 'TMRG' 'TVSR' 'ViP3R' 'VTV' 'WEB DL' 'WS' 'YIFY')

#TAGS USED BY GROUPS TO GIVE INFORMATION ABOUT THE DOWNLOAD (NOT CASE SENSITIVE)
INFO=('1080p' '5.1' '720p' 'aac2.0' 'aac' 'ac3' 'blu ray' 'bluray' 'brrip' 'dts' 'dvdrip' 'eng' 'esubs' 'ffmpeg' 'h.264' 'h264' 'hdtv' 'proper' 'repack' 'ts' 'unrated' 'web-dl' 'webrip' 'x264' 'xvid')

function dd_help {
    SCRIPTNAME=$(sed 's/.*\///g' <<< "$0")
    echo -e "NAME: ${SCRIPTNAME}\n"
    echo -e "DESCRIPTION\n  Remove tags and sanitize the filenames of release group downloads\n"
    echo -e "SYNOPSIS\n  ${SCRIPTNAME} [option(s)] file(s)\n"
    echo -e "OPTIONS"
    echo -e "  ${SCRIPTNAME} -t file(s) | --test file(s)\n    View the changes without making them\n"
    echo -e "  ${SCRIPTNAME} -y file(s) | --strip-year file(s)\n    Strip the year from the end of the filename\n"
    echo -e "  ${SCRIPTNAME} -e file(s) | --episode-fix file(s)\n    Fix episode tag information (ie: S01E01)\n"
    echo -e "  ${SCRIPTNAME} -h | --help\n    Display this help\n"
    echo -e "EXAMPLES"
    echo -e "  ${SCRIPTNAME} *\n    Run on all files in the directory\n"
    echo -e "  ${SCRIPTNAME} *.mp4\n    Run on all files ending in .mp4\n"
    echo -e "  ${SCRIPTNAME} file1 file2\n    Run on 'file1' and 'file2'\n"
    echo -e "  ${SCRIPTNAME} -t file1 file2\n    See how file1 and file2 would change"
}

function dd_newname {
    if [ ! "$NEWNAME" = "$1" ]; then NEWNAME="$1"; fi
}

function dd_debrand {
    FILENAME="$(sed 's/\\//g' <<< $1)"
    NEWNAME="$FILENAME"

    for group in ${SCENE[@]}; do
        dd_newname "$(sed -re 's|([^a-zA-Z])'${group}'([^a-zA-Z])|\1\2|g' <<< $NEWNAME)"
    done
    for info in ${INFO[@]}; do
        dd_newname "$(sed -re 's|([^a-zA-Z])'${info}'([^a-zA-Z])|\1\2|gi' <<< $NEWNAME)"
    done

    dd_newname "$(sed 's/\[\ *\]//g' <<< $NEWNAME)" #Remove leftover '[]'s from groups
    dd_newname "$(sed 's/(\ *)//g' <<< $NEWNAME)" #Remove leftover '()'s from groups
    dd_newname "$(sed 's/{\ *}//g' <<< $NEWNAME)" #Remove leftover '{}'s from groups
    dd_newname "$(sed 's/-/\ /g' <<< $NEWNAME)" #Replace '-'s with spaces
    dd_newname "$(sed 's/\./\ /g' <<< $NEWNAME)" #Replace '.'s with spaces
    dd_newname "$(sed 's/\ \ */\ /g' <<< $NEWNAME)" #Replace multiple spaces with a single space
    dd_newname "$(sed 's/\ \([^\ ]*\)$/\.\1/g' <<< $NEWNAME)" #Replace the final space with a '.'

    #Fix the episode tag if the flag is set
    if [[ "$EPISODE_FIX" = 1 ]]; then
        dd_newname "$(sed -re 's/\ ([0-9])x([0-9][0-9][\ \.])/\ S0\1E\2/gi' <<< $NEWNAME)" #Replace #x## with S0#E##
        dd_newname "$(sed -re 's/\ S([0-9])E/\ S0\1E/gi' <<< $NEWNAME)" #Replace S#E with S0#E
        dd_newname "$(sed -re 's/\ S([0-9][0-9])E([0-9][^[0-9])/\ S\1E0\2/gi' <<< $NEWNAME)" #Replace S##E# with S0#E0#
        dd_newname "$(sed -re 's/\ s([0-9][0-9]*)e([0-9][0-9]*)/\ S\1E\2/gi' <<< $NEWNAME)" #Replace s##e## with S##E##
    fi

    #Strip the year if the flag is set
    [[ "$STRIP_YEAR" = 1 ]] \
        && dd_newname "$(sed 's/\ (*[0-9][0-9][0-9][0-9])*\./\./g' <<< $NEWNAME)"

    if [[ "$TEST" = 1 ]]; then
        echo -n "TESTING: "
        if [[ -n "$NEWNAME" ]]; then
            [[ ! "$FILENAME" = "$NEWNAME" ]] \
                && echo "${FILENAME} -> ${NEWNAME}" || echo "No change to ${FILENAME}"
        else
            echo "Error: couldn't debrand ${FILENAME}"
        fi
    else
        if [[ -n "$NEWNAME" ]]; then
            [[ ! "$FILENAME" = "$NEWNAME" ]] \
                && mv "$FILENAME" "$NEWNAME"
        else
            echo "Error: couldn't debrand ${FILENAME}"
        fi
    fi
}

for param in "$@"; do
    case "$param" in
        -h|--help)
            # Run help and exit with a success
            [[ ! "$PARAM_CHECK" = 1 ]] && dd_help && exit 0
            ;;
        -t|--test)
            # TEST flag says to output changes (not make them)
            [[ -z "$TEST" ]] && [[ ! "$PARAM_CHECK" = 1 ]] && TEST=1
            ;;
        -y|--strip-year)
            [[ -z "$STRIP_YEAR" ]] && [[ ! "$PARAM_CHECK" = 1 ]] && STRIP_YEAR=1
            ;;
        -e|--episode-fix)
            [[ -z "$EPISODE_FIX" ]] && [[ ! "$PARAM_CHECK" = 1 ]] && EPISODE_FIX=1
            ;;
        *)
            # PARAM_CHECK says non-flag args were given
            PARAM_CHECK=1
            if [[ -f "$param" ]]; then
                if [[ ! -w "$param" ]]; then
                    echo "Error: ${param} is not writable"
                    exit 1
                fi
                dd_debrand "$param"
            else
                # Skip directories and complain about anything else
                [[ -d "$param" ]] || echo "Error: no file exists with the name ${param}"
            fi
            ;;
    esac
done

# Exit with an error if no inputs is given
[[ ! "$PARAM_CHECK" = 1 ]] \
    && echo -e "Error: please provide at least one file as an argument\n" \
    && dd_help \
    && exit 1

exit 0
