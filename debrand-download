#! /usr/bin/env bash

#
# debrand-download: remove tags and sanitize the filenames of release downloads
#
# Written by Kevin MacMartin (prurigro@gmail.com)
# Distributed under the GPLv3 (obtained @ http://www.gnu.org/copyleft/gpl.html)
#
# examples:
#   The Last Man on Earth 720p [2HD] [AFG].mkv -> The Last Man on Earth.mkv
#   Beverly Hillbillies s1e4 [LOL] (AC3).mp4 -> Beverly Hillbillies S01E04.mp4
#

#THE NAMES OF VARIOUS RELEASE GROUPS (CASE SENSITIVE)
scene_tags=('0TV' '2HD' '2hd' 'ABH' 'ACAB' 'AFG' 'ANGELiC' 'ANON' 'anoXmous' 'ASAP' 'asap' 'asd' 'BAJSKORV' 'BARGE' 'BADASSMEDIA' 'BATV' 'BiA' 'BOKUTOX' 'BORDERLiNE' 'BRiTiSH' 'BT' 'BTN' 'BWB' 'C4TV' 'c4tv' 'CaRaT' 'CBFM' 'CBM' 'CHiVALRiC' 'CLOWNSEC' 'COMPULSiON' 'CRiMSON' 'CROOKS' 'CtrlHD' 'DEADPOOL' 'DiNGO' 'DIMENSION' 'DHD' 'DUKES' 'ETRG' 'EVOLVE' 'EXCELLENCE' 'FaiLED' 'FaiL' 'Fastbet99' 'FEVER' 'FiHTV' 'FiNCH' 'FoV' 'FTP' 'FQM' 'fqm' 'FUM' 'FXG' 'G2G' 'greenbud1969' 'GREY SHADOW' 'GSFTX' 'HerMes' 'IMMERSE' 'iNTERNAL' 'jAh' 'Judas' 'Juggalotus' 'juggs' 'JYK' 'KILLERS' 'killers' 'KiNGS' 'KNiFESHARP' 'L1' 'LMAO' 'LOL' 'lol' 'Max' 'MiNDTHEGAP' 'MiNT' 'MOBTV' 'NOGRP' 'NoTV' 'notv' 'NTb' 'OMiCRON' 'ORENJI' 'Orenji' 'ORGANiC' 'pcsyndicate' 'PhoenixRG' 'Phr0stY' 'Pimp4003' 'P0W4' 'PhreakyFlix' 'PublicHD' 'QCF' 'QUEENS' 'RARBG' 'rarbg' 'ReEnc' 'REKD' 'REMARKABLE' 'RiVER' 'RM' 'SA89' 'SaMettv' 'SFD' 'SKGTV' 'SPARKS' 'SYS' 'TASTETV' 'TERRA' 'TinyHD' 'TiTAN' 'TLA' 'tla' 'TMRG' 'TOPKEK' 'TVSR' 'ViP3R' 'VTV' 'W4F' 'w4f' 'WNN' 'WS' 'xor' 'YesTV' 'yestv' 'YIFY')

#TAGS USED BY GROUPS TO GIVE INFORMATION ABOUT THE DOWNLOAD (NOT CASE SENSITIVE)
info_tags=('1080p' '1280x720' '5\.1' '720p' 'aac2\.0' 'aac2' 'aac' 'ac3' 'blu ray' 'bluray' 'brrip' 'dd5\.1' 'dts' 'dvdscr' 'dvdrip' 'eng' 'esubs' 'ffmpeg' 'h\.264' 'h264' 'hdrip' 'hdtv' 'mp3' 'mkv' 'pdtv' 'proper' 'r1' 'r2' 'r3' 'r4' 'r5' 'r6' 'r7' 'r8' 'r9' 'repack' 'ts' 'unrated' 'web-dl' 'web dl' 'webrip' 'x264' 'xvid')

# Colours
[[ -t 1 ]] && {
    c_d=$'\e[1;30m' # GREY
    c_r=$'\e[1;31m' # RED
    c_g=$'\e[1;32m' # GREEN
    c_y=$'\e[1;33m' # YELLOW
    c_b=$'\e[1;34m' # BLUE
    c_m=$'\e[1;35m' # VIOLET
    c_t=$'\e[1;36m' # TEAL
    c_w=$'\e[1;37m' # WHITE
    c_c=$'\e[0m'    # DISABLES COLOUR
}

function error {
    printf '%s %s\n' "${c_r}ERROR:$c_c" "$c_w$1$c_c" >&2
}

function dd_help {
    script_name="${0//*\/}"
    printf '\n%s\n\n'      "$c_y$script_name$c_w: Remove tags and sanitize the filenames of scene group downloads$c_c"
    printf '%s\n  %s\n\n'  "${c_b}SYNOPSIS$c_c"                                 "$c_y$script_name $c_d[${c_r}OPTION(S)$c_d] ${c_m}FILE(S)$c_d]$c_c"
    printf '%s\n' "${c_b}OPTIONS$c_c"
    printf '  %-61s%s\n'   "$c_w-t file(s) $c_d|$c_w --test file(s)$c_c"        'view the changes without making them'
    printf '  %-61s%s\n'   "$c_w-y file(s) $c_d|$c_w --strip-year file(s)$c_c"  'strip the year from the end of the filename'
    printf '  %-61s%s\n'   "$c_w-e file(s) $c_d|$c_w --episode-fix file(s)$c_c" 'fix episode tag information (ie: S01E01)'
    printf '  %-61s%s\n\n' "$c_w-h $c_d|$c_w --help$c_c"                        'display this help text'
    printf '%s\n' "${c_b}EXAMPLES$c_c"
    printf '  %-54s%s\n'   "$c_y$script_name $c_w*$c_c"                         'run on all files in the directory'
    printf '  %-54s%s\n'   "$c_y$script_name $c_w*.mp4$c_c"                     'run on all files ending in .mp4'
    printf '  %-54s%s\n'   "$c_y$script_name ${c_w}file1 file2$c_c"             'run on file1 and file2'
    printf '  %-54s%s\n\n' "$c_y$script_name $c_w-t file1 file2$c_c"            'see how file1 and file2 would change'
}

function dd_debrand {
    file_name="${1//\\}"
    new_name="$file_name"

    for scene in "${scene_tags[@]}"; do
        new_name="$(sed -re 's|([^a-zA-Z])'"${scene}"'([^a-zA-Z])|\1\2|g' <<< "$new_name")"
    done
    for info in "${info_tags[@]}"; do
        new_name="$(sed -re 's|([^a-zA-Z])'"${info}"'([^a-zA-Z])|\1\2|gi' <<< "$new_name")"
    done

    new_name="$(sed 's/\[\ *\]//g' <<< "$new_name")"           # Remove leftover '[]'s from scenes
    new_name="$(sed 's/(\ *)//g' <<< "$new_name")"             # Remove leftover '()'s from scenes
    new_name="$(sed 's/{\ *}//g' <<< "$new_name")"             # Remove leftover '{}'s from scenes
    new_name="$(sed 's/-/\ /g' <<< "$new_name")"               # Replace '-'s with spaces
    new_name="$(sed 's/[\._]/\ /g' <<< "$new_name")"           # Replace '.'s with spaces
    new_name="$(sed 's/\ \ */\ /g' <<< "$new_name")"           # Replace multiple spaces with a single space
    new_name="$(sed 's/\ \([^\ ]*\)$/\.\1/g' <<< "$new_name")" # Replace the final space with a '.'

    # Fix the episode tag if the flag is set
    if (( episode_fix == 1 )); then
        new_name="$(sed -re 's/\ ([0-9])x([0-9][0-9][\ \.])/\ S0\1E\2/gi' <<< "$new_name")"   # Replace #x## with S0#E##
        new_name="$(sed -re 's/\ S([0-9])E/\ S0\1E/gi' <<< "$new_name")"                      # Replace S#E with S0#E
        new_name="$(sed -re 's/\ S([0-9][0-9])E([0-9][^[0-9])/\ S\1E0\2/gi' <<< "$new_name")" # Replace S##E# with S0#E0#
        new_name="$(sed -re 's/\ s([0-9][0-9]*)e([0-9][0-9]*)/\ S\1E\2/gi' <<< "$new_name")"  # Replace s##e## with S##E##
    fi

    # Strip the year if the flag is set
    (( strip_year == 1 )) \
        && new_name="$(sed 's/\ (*[0-9][0-9][0-9][0-9])*\./\./g' <<< "$new_name")"

    if (( test == 1 )); then
        printf '%s' 'TESTING: '
        if [[ -n "$new_name" ]]; then
            if [[ "$file_name" = "$new_name" ]]; then
                printf '%s\n' "No change to $file_name"
            else
                printf '%s\n' "$file_name -> $new_name"
            fi
        else
            error "couldn't debrand $file_name"
        fi
    else
        if [[ -n "$new_name" ]]; then
            [[ ! "$file_name" = "$new_name" ]] \
                && mv "$file_name" "$new_name"
        else
            error "couldn't debrand $file_name"
        fi
    fi
}

for param in "$@"; do
    case "$param" in
        -h|--help)
            # Run help and exit with a success
            (( param_check == 1 )) || {
                dd_help
                exit 0
            }
            ;;
        -t|--test)
            # TEST flag says to output changes (not make them)
            (( param_check == 1 )) \
                || test=1
            ;;
        -y|--strip-year)
            (( param_check == 1 )) \
                || strip_year=1
            ;;
        -e|--episode-fix)
            (( param_check == 1 )) \
                || episode_fix=1
            ;;
        *)
            # param_check says non-flag args were given
            param_check=1
            if [[ -f "$param" ]]; then
                [[ -w "$param" ]] || {
                    error "$param is not writable"
                    exit 1
                }
                dd_debrand "$param"
            else
                # Skip directories and complain about anything else
                [[ -d "$param" ]] \
                    || error "no file exists with the name $param"
            fi
            ;;
    esac
done

# Exit with an error if no inputs is given
[[ "$param_check" = 1 ]] || {
    error 'please provide at least one file as an argument'
    dd_help
    exit 1
}

exit 0
